version: '3.8'

networks:
  microservice-network:
    driver: bridge

services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: microservice-redis
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 20s
      retries: 10
    networks:
      - microservice-network
    restart: unless-stopped

  # MySQL for Auth Service
  auth-mysql:
    image: mysql:8.0
    container_name: auth-mysql
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${AUTH_DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - auth_mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      - microservice-network
    restart: unless-stopped

  # MySQL for User Service
  user-mysql:
    image: mysql:8.0
    container_name: user-mysql
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${USER_DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - user_mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      - microservice-network
    restart: unless-stopped

  # MySQL for Book Service
  book-mysql:
    image: mysql:8.0
    container_name: book-mysql
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${BOOK_DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3308:3306"
    volumes:
      - book_mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      - microservice-network
    restart: unless-stopped

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    container_name: microservice-auth
    env_file:
      - .env
    environment:
      - PORT=${AUTH_SERVICE_PORT}
      - GIN_MODE=${GIN_MODE}
      - DB_HOST=auth-mysql
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${AUTH_DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRY_HOURS=${JWT_EXPIRY_HOURS}
      - USER_SERVICE_URL=user-service:9081
    ports:
      - "8080:8080"
      - "9080:9080"
    volumes:
      - ./auth-service:/app/auth-service
      - ./shared:/app/shared
    depends_on:
      auth-mysql:
        condition: service_healthy
    networks:
      - microservice-network
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    container_name: microservice-user
    env_file:
      - .env
    environment:
      - PORT=${USER_SERVICE_PORT}
      - GIN_MODE=${GIN_MODE}
      - DB_HOST=user-mysql
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${USER_DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - AUTH_SERVICE_URL=auth-service:9080
      - REDIS_URL=redis:6379
      - CACHE_ENABLED=${CACHE_ENABLED}
      - L1_CACHE_TTL_MINUTES=${L1_CACHE_TTL_MINUTES}
      - L2_CACHE_TTL_MINUTES=${L2_CACHE_TTL_MINUTES}
    ports:
      - "8081:8081"
      - "9081:9081"
    volumes:
      - ./user-service:/app/user-service
      - ./shared:/app/shared
    depends_on:
      user-mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - microservice-network
    restart: unless-stopped

  # Book Service
  book-service:
    build:
      context: .
      dockerfile: ./book-service/Dockerfile
    container_name: microservice-book
    env_file:
      - .env
    environment:
      - PORT=${BOOK_SERVICE_PORT}
      - GIN_MODE=${GIN_MODE}
      - DB_HOST=book-mysql
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${BOOK_DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - AUTH_SERVICE_URL=auth-service:9080
      - REDIS_URL=redis:6379
      - CACHE_ENABLED=${CACHE_ENABLED}
      - L1_CACHE_TTL_MINUTES=${L1_CACHE_TTL_MINUTES}
      - L2_CACHE_TTL_MINUTES=${L2_CACHE_TTL_MINUTES}
    ports:
      - "8082:8082"
    volumes:
      - ./book-service:/app/book-service
      - ./shared:/app/shared
    depends_on:
      book-mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - microservice-network
    restart: unless-stopped

volumes:
  redis_data:
  auth_mysql_data:
  user_mysql_data:
  book_mysql_data: 